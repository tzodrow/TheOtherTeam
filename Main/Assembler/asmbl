import getopt
import sys
import warnings

error_msg = "ERROR IN LINE"


def check_valid(dictionary, value, arg_num, line_num):
    if value in dictionary:
        return True
    else:
        warnings.warn("Invalid entry at line " + str(line_num) + " for argument " + str(arg_num), SyntaxWarning)
        return False


def pad(value, length):
    zeros = length - len(value)
    if zeros < 0:
        zeros = -zeros
        value = value[zeros:]
    else:
        for x in range(0, zeros):
            value = '0' + value
    return value


def add(args, line_num):
    if len(args) != 3:
        warnings.warn("Invalid Number of arguments at line " + str(line_num), SyntaxWarning)
        return error_msg
    if check_valid(registers, args[0], 1, line_num) and check_valid(registers, args[1], 2, line_num) \
            and check_valid(registers, args[2], 3, line_num):
        return '00000' + registers[args[0]] + registers[args[1]] + registers[args[2]] + pad("0", 12)
    else:
        return error_msg


def addi(args, line_num):
    if len(args) != 3:
        warnings.warn("Invalid Number of arguments at line " + str(line_num), SyntaxWarning)
        return error_msg
    if check_valid(registers, args[0], 1, line_num) and check_valid(registers, args[1], 2, line_num) \
            and isinstance(int(args[2]), int):
        return '00001' + registers[args[0]] + registers[args[1]] + pad(bin(int(args[2]))[2:], 17)
    else:
        return error_msg


def sub(args, line_num):
    if len(args) != 3:
        warnings.warn("Invalid Number of arguments at line " + str(line_num), SyntaxWarning)
        return error_msg
    if check_valid(registers, args[0], 1, line_num) and check_valid(registers, args[1], 2, line_num) \
            and check_valid(registers, args[2], 3, line_num):
        return '00010' + registers[args[0]] + registers[args[1]] + registers[args[2]] + pad("0", 12)
    else:
        return error_msg


def subi(args, line_num):
    if len(args) != 3:
        warnings.warn("Invalid Number of arguments at line " + str(line_num), SyntaxWarning)
        return error_msg
    if check_valid(registers, args[0], 1, line_num) and check_valid(registers, args[1], 2, line_num) \
            and isinstance(int(args[2]), int):
        return '00011' + registers[args[0]] + registers[args[1]] + pad(bin(int(args[2]))[2:], 17)
    else:
        return error_msg


def lw(args, line_num):
    if len(args) != 3:
        warnings.warn("Invalid Number of arguments at line " + str(line_num), SyntaxWarning)
        return error_msg
    if check_valid(registers, args[0], 1, line_num) and check_valid(registers, args[1], 2, line_num) \
            and isinstance(int(args[2]), int):
        return '00100' + registers[args[0]] + registers[args[1]] + pad(bin(int(args[2]))[2:], 17)
    else:
        return error_msg


def sw(args, line_num):
    if len(args) != 3:
        warnings.warn("Invalid Number of arguments at line " + str(line_num), SyntaxWarning)
        return error_msg
    if check_valid(registers, args[0], 1, line_num) and check_valid(registers, args[1], 2, line_num) \
            and isinstance(int(args[2]), int):
        return '00101' + registers[args[0]] + registers[args[1]] + pad(bin(int(args[2]))[2:], 17)
    else:
        return error_msg


def mov(args, line_num):
    if len(args) != 2:
        warnings.warn("Invalid Number of arguments at line " + str(line_num), SyntaxWarning)
        return error_msg
    if check_valid(registers, args[0], 1, line_num) and check_valid(registers, args[1], 2, line_num):
        return '00110' + registers[args[0]] + registers[args[1]] + pad("0", 17)
    else:
        return error_msg


def movi(args, line_num):
    if len(args) != 3:
        warnings.warn("Invalid Number of arguments at line " + str(line_num), SyntaxWarning)
        return error_msg
    if isinstance(int(args[0]), int) and check_valid(registers, args[1], 2, line_num) \
            and isinstance(int(args[2]), int):
        return '00111' + registers[args[1]] + pad(bin(int(args[0]))[2:], 2) + pad(bin(int(args[2]))[2:], 8) \
               + pad("0", 12)
    else:
        return error_msg


def andi(args, line_num):
    if len(args) != 3:
        warnings.warn("Invalid Number of arguments at line " + str(line_num), SyntaxWarning)
        return error_msg
    if check_valid(registers, args[0], 1, line_num) and check_valid(registers, args[1], 2, line_num) \
            and check_valid(registers, args[2], 3, line_num):
        return '01000' + registers[args[0]] + registers[args[1]] + registers[args[2]] + pad("0", 12)
    else:
        return error_msg


def ori(args, line_num):
    if len(args) != 3:
        warnings.warn("Invalid Number of arguments at line " + str(line_num), SyntaxWarning)
        return error_msg
    if check_valid(registers, args[0], 1, line_num) and check_valid(registers, args[1], 2, line_num) \
            and check_valid(registers, args[2], 3, line_num):
        return '01001' + registers[args[0]] + registers[args[1]] + registers[args[2]] + pad("0", 12)
    else:
        return error_msg


def nor(args, line_num):
    if len(args) != 3:
        warnings.warn("Invalid Number of arguments at line " + str(line_num), SyntaxWarning)
        return error_msg
    if check_valid(registers, args[0], 1, line_num) and check_valid(registers, args[1], 2, line_num) \
            and check_valid(registers, args[2], 3, line_num):
        return '01010' + registers[args[0]] + registers[args[1]] + registers[args[2]] + pad("0", 12)
    else:
        return error_msg


def sll(args, line_num):
    if len(args) != 3:
        warnings.warn("Invalid Number of arguments at line " + str(line_num), SyntaxWarning)
        return error_msg
    if check_valid(registers, args[0], 1, line_num) and check_valid(registers, args[1], 2, line_num) \
            and isinstance(int(args[2]), int):
        return '01011' + registers[args[0]] + registers[args[1]] + pad(bin(int(args[2]))[2:], 17)
    else:
        return error_msg


def srl(args, line_num):
    if len(args) != 3:
        warnings.warn("Invalid Number of arguments at line " + str(line_num), SyntaxWarning)
        return error_msg
    if check_valid(registers, args[0], 1, line_num) and check_valid(registers, args[1], 2, line_num) \
            and isinstance(int(args[2]), int):
        return '01100' + registers[args[0]] + registers[args[1]] + pad(bin(int(args[2]))[2:], 17)
    else:
        return error_msg


def sra(args, line_num):
    if len(args) != 3:
        warnings.warn("Invalid Number of arguments at line " + str(line_num), SyntaxWarning)
        return error_msg
    if check_valid(registers, args[0], 1, line_num) and check_valid(registers, args[1], 2, line_num) \
            and isinstance(int(args[2]), int):
        return '01101' + registers[args[0]] + registers[args[1]] + pad(bin(int(args[2]))[2:], 17)
    else:
        return error_msg


def b(args, line_num):
    if len(args) != 2:
        warnings.warn("Invalid Number of arguments at line " + str(line_num), SyntaxWarning)
        return error_msg
    if check_valid(conditions, args[0], 1, line_num) and check_valid(labels, args[1], 2, line_num):
        return '01110' + conditions[args[0]] + pad("0", 2) + pad(bin(int(labels[args[1]]))[2:], 22)
    else:
        return error_msg


def j():
    print 'NO IMPLEMENTED'


def jr(args, line_num):
    if len(args) != 1:
        warnings.warn("Invalid Number of arguments at line " + str(line_num), SyntaxWarning)
        return error_msg
    if check_valid(registers, args[0], 1, line_num):
        return '10000' + registers[args[0]] + pad("0", 22)
    else:
        return error_msg


def jal(args, line_num):
    if len(args) != 1:
        warnings.warn("Invalid Number of arguments at line " + str(line_num), SyntaxWarning)
        return error_msg
    if check_valid(labels, args[0], 1, line_num):
        return '10001' + pad(bin(labels[args[0]])[2:], 27)
    else:
        return error_msg


def act(args, line_num):
    if len(args) != 3:
        warnings.warn("Invalid Number of arguments at line " + str(line_num), SyntaxWarning)
        return error_msg
    if isinstance(int(args[0]), int) and check_valid(actions, args[1], 2, line_num) \
            and check_valid(registers, args[2], 3, line_num):
        return '10010' + actions[args[1]] + pad(bin(int(args[0]))[2:], 8) + registers[args[2]] + pad("0", 10)
    else:
        return error_msg


def acti(args, line_num):
    if len(args) != 3:
        warnings.warn("Invalid Number of arguments at line " + str(line_num), SyntaxWarning)
        return error_msg
    if isinstance(int(args[0]), int) and check_valid(actions, args[1], 2, line_num) \
            and isinstance(int(args[2]), int):
        return '10010' + actions[args[1]] + pad(bin(int(args[0]))[2:], 8) + pad(bin(int(args[2]))[2:], 14) + "1"
    else:
        return error_msg


def ld(args, line_num):
    if len(args) != 3:
        warnings.warn("Invalid Number of arguments at line " + str(line_num), SyntaxWarning)
        return error_msg
    if isinstance(int(args[0]), int) and check_valid(attributes, args[1], 2, line_num) \
            and check_valid(registers, args[2], 3, line_num):
        return '10011' + attributes[args[1]] + pad(bin(int(args[0]))[2:], 8) + registers[args[2]] + pad("0", 10)
    else:
        return error_msg


def ldi(args, line_num):
    if len(args) != 3:
        warnings.warn("Invalid Number of arguments at line " + str(line_num), SyntaxWarning)
        return error_msg
    if isinstance(int(args[0]), int) and check_valid(attributes, args[1], 2, line_num) \
            and isinstance(int(args[2]), int):
        return '10011' + attributes[args[1]] + pad(bin(int(args[0]))[2:], 8) + pad(bin(int(args[2]))[2:], 14) + "1"
    else:
        return error_msg


def rdi(args, line_num):
    if len(args) != 3:
        warnings.warn("Invalid Number of arguments at line " + str(line_num), SyntaxWarning)
        return error_msg
    if isinstance(int(args[0]), int) and check_valid(attributes, args[1], 2, line_num) \
            and check_valid(registers, args[2], 3, line_num):
        return '10100' + attributes[args[1]] + pad(bin(int(args[0]))[2:], 8) + registers[args[2]] + pad("0", 10)
    else:
        return error_msg


def mapi(args, line_num):
    if len(args) != 1:
        warnings.warn("Invalid Number of arguments at line " + str(line_num), SyntaxWarning)
        return error_msg
    if isinstance(int(args[0]), int):
        return '10101' + pad("0", 12) + pad(bin(int(args[0]))[2:], 14) + "1"
    else:
        return error_msg


def cord(args, line_num):
    if len(args) != 2:
        warnings.warn("Invalid Number of arguments at line " + str(line_num), SyntaxWarning)
        return error_msg
    if isinstance(int(args[0]), int) and check_valid(registers, args[1], 2, line_num):
        return '10110' + pad("0", 4) + pad(bin(int(args[0]))[2:], 8) + registers[args[1]] + pad("0", 10)
    else:
        return error_msg


def key(args, line_num):
    if len(args) != 1:
        warnings.warn("Invalid Number of arguments at line " + str(line_num), SyntaxWarning)
        return error_msg
    if check_valid(registers, args[0], 2, line_num):
        return '10111' + registers[args[0]] + pad("0", 22)
    else:
        return error_msg


def tm(args, line_num):
    if len(args) != 1:
        warnings.warn("Invalid Number of arguments at line " + str(line_num), SyntaxWarning)
        return error_msg
    if isinstance(int(args[0]), int):
        return '11000' + pad("0", 12) + pad(bin(int(args[0]))[2:], 14) + "1"
    else:
        return error_msg


def halt(args, line_num):
    if len(args) != 0:
        warnings.warn("Invalid Number of arguments at line " + str(line_num), SyntaxWarning)
        return error_msg
    else:
        return '11111' + pad("0", 27)


opcodes = dict(
    ADD=add,
    ADDI=addi,
    SUB=sub,
    SUBI=subi,
    LW=lw,
    SW=sw,
    MOV=mov,
    MOVI=movi,
    AND=andi,
    OR=ori,
    NOR=nor,
    SLL=sll,
    SRL=srl,
    SRA=sra,
    B=b,
    J=j,
    JR=jr,
    JAL=jal,
    ACT=act,
    ACTI=acti,
    LD=ld,
    LDI=ldi,
    RD=rdi,
    MAP=mapi,
    CORD=cord,
    KEY=key,
    TM=tm,
    HALT=halt
)

registers = dict(
    R0='00000',
    R1='00001',
    R2='00010',
    R3='00011',
    R4='00100',
    R5='00101',
    R6='00110',
    R7='00111',
    R8='01000',
    R9='01001',
    R10='01010',
    R11='01011',
    R12='01100',
    R13='01101',
    R14='01110',
    R15='01111',
    R16='10000',
    R17='10001',
    R18='10010',
    R19='10011',
    R20='10100',
    R21='10101',
    R22='10110',
    R23='10111',
    R24='11000',
    R25='11001',
    R26='11010',
    R27='11011',
    R28='11100',
    R29='11101',
    R30='11110',
    R31='11111'
)

attributes = dict(
    HTH='0000',
    SCR='0001',
    LIV='0010',
    SPD='0011',
    DIF='0100',
    DAM='0101',
    PLY='0110',
    IMG='0111',
    XCRD='1000',
    YCRD='1001'
)

actions = dict(
    UP='0000',
    DO='0001',
    LFT='0010',
    RGH='0011',
    DES='0100',
    CRT='0101',
    RST='0110',
    ATK='0111'
)

conditions = dict(
    NEQ='000',
    EQ='001',
    GT='010',
    LT='011',
    GTE='100',
    LTE='101',
    OVFL='110',
    UNCON='111'
)

hex_digits = {
    '0': "0000",
    '1': "0001",
    '2': "0010",
    '3': "0011",
    '4': "0100",
    '5': "0101",
    '6': "0110",
    '7': "0111",
    '8': "1000",
    '9': "1001",
    'A': "1010",
    'a': "1010",
    'B': "1011",
    'b': "1011",
    'C': "1100",
    'c': "1100",
    'D': "1101",
    'd': "1101",
    'E': "1110",
    'e': "1110",
    'F': "1111",
    'f': "1111"
}

labels = dict()


def find_labels(line, line_num):
    args = line.split()
    label = args[0].upper()
    if not (label in opcodes):
        if label in labels:
            warnings.warn("Label Repeated at line " + str(line_num), SyntaxWarning)
            return False
        else:
            labels[label] = line_num
            return True
    else:
        return True


def process(line, outfile, line_num):
    args = line.split()
    if not args[0].upper() in opcodes:
        if args[0].upper() in labels:
            args.pop(0)
        else:
            warnings.warn("Label (" + args[0] + ") Repeated at line " + str(line_num), SyntaxWarning)

    opcode = args.pop(0).upper()
    if opcode in opcodes:
        instr = opcodes[opcode](args, line_num)
        if instr != error_msg:
            print instr
            outfile.write("%s\n" % instr)
        else:
            print error_msg + ": " + line
            outfile.write("%s\n" % error_msg + ": " + line)
    else:
        warnings.warn("Opcode(" + opcode + ") does not exist at line " + str(line_num), SyntaxWarning)


def main(argv):
    inputfile = ''
    outputfile = ''
    try:
        opts, args = getopt.getopt(argv, "hi:o:", ["ifile=", "ofile="])
    except getopt.GetoptError:
        print 'test.py -i <inputfile> -o <outputfile>'
        sys.exit(2)
    for opt, arg in opts:
        if opt == '-help':
            print 'test.py -i <inputfile> -o <outputfile>'
            sys.exit()
        elif opt in ("-i", "--ifile"):
            inputfile = arg
        elif opt in ("-o", "--ofile"):
            outputfile = arg

    f = open(inputfile, 'r')
    o = open(outputfile, 'w')

    line_counter = 0
    for line in f:
        find_labels(line, line_counter)
        line_counter += 1
    f.close()

    f = open(inputfile, 'r')
    line_counter = 0
    for line in f:
        process(line, o, line_counter)
        line_counter += 1
    f.close()
    o.close()


if __name__ == "__main__":
    main(sys.argv[1:])